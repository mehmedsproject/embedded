
GccApplication6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000000fa  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  0000012a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000187  00000000  00000000  0000014a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000e5  00000000  00000000  000002d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000015a  00000000  00000000  000003b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000024  00000000  00000000  00000510  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000190  00000000  00000000  00000534  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000090  00000000  00000000  000006c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000010  00000000  00000000  00000754  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	36 c0       	rjmp	.+108    	; 0xa2 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#include <avr/io.h>
#include <util/delay.h>
int main(void)
{
	
	DDRD = 0xff;
  38:	8f ef       	ldi	r24, 0xFF	; 255
  3a:	81 bb       	out	0x11, r24	; 17
	DDRB = 0x08;
  3c:	88 e0       	ldi	r24, 0x08	; 8
  3e:	87 bb       	out	0x17, r24	; 23
	PORTB= 0x00;
  40:	18 ba       	out	0x18, r1	; 24
	TCCR2 = 0x69;
  42:	89 e6       	ldi	r24, 0x69	; 105
  44:	85 bd       	out	0x25, r24	; 37
			OCR2 = 127;
		}
		else if (bit_is_set(PINB,2))
		{
			_delay_ms(250);
			OCR2 = 200;
  46:	48 ec       	ldi	r20, 0xC8	; 200
			OCR2 = 63;
		}
		else if (bit_is_set(PINB,1))
		{
			_delay_ms(250);
			OCR2 = 127;
  48:	3f e7       	ldi	r19, 0x7F	; 127
       
	   PORTD ^= OCR2;
		if (bit_is_set(PINB,0))
		{
			_delay_ms(250);
			OCR2 = 63;
  4a:	2f e3       	ldi	r18, 0x3F	; 63
	TCCR2 = 0x69;
	
    while(1)
    {
       
	   PORTD ^= OCR2;
  4c:	82 b3       	in	r24, 0x12	; 18
  4e:	93 b5       	in	r25, 0x23	; 35
  50:	89 27       	eor	r24, r25
  52:	82 bb       	out	0x12, r24	; 18
		if (bit_is_set(PINB,0))
  54:	b0 9b       	sbis	0x16, 0	; 22
  56:	0b c0       	rjmp	.+22     	; 0x6e <__SREG__+0x2f>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  58:	5f e7       	ldi	r21, 0x7F	; 127
  5a:	8a e1       	ldi	r24, 0x1A	; 26
  5c:	96 e0       	ldi	r25, 0x06	; 6
  5e:	51 50       	subi	r21, 0x01	; 1
  60:	80 40       	sbci	r24, 0x00	; 0
  62:	90 40       	sbci	r25, 0x00	; 0
  64:	e1 f7       	brne	.-8      	; 0x5e <__SREG__+0x1f>
  66:	00 c0       	rjmp	.+0      	; 0x68 <__SREG__+0x29>
  68:	00 00       	nop
		{
			_delay_ms(250);
			OCR2 = 63;
  6a:	23 bd       	out	0x23, r18	; 35
  6c:	ef cf       	rjmp	.-34     	; 0x4c <__SREG__+0xd>
		}
		else if (bit_is_set(PINB,1))
  6e:	b1 9b       	sbis	0x16, 1	; 22
  70:	0b c0       	rjmp	.+22     	; 0x88 <__SREG__+0x49>
  72:	5f e7       	ldi	r21, 0x7F	; 127
  74:	8a e1       	ldi	r24, 0x1A	; 26
  76:	96 e0       	ldi	r25, 0x06	; 6
  78:	51 50       	subi	r21, 0x01	; 1
  7a:	80 40       	sbci	r24, 0x00	; 0
  7c:	90 40       	sbci	r25, 0x00	; 0
  7e:	e1 f7       	brne	.-8      	; 0x78 <__SREG__+0x39>
  80:	00 c0       	rjmp	.+0      	; 0x82 <__SREG__+0x43>
  82:	00 00       	nop
		{
			_delay_ms(250);
			OCR2 = 127;
  84:	33 bd       	out	0x23, r19	; 35
  86:	e2 cf       	rjmp	.-60     	; 0x4c <__SREG__+0xd>
		}
		else if (bit_is_set(PINB,2))
  88:	b2 9b       	sbis	0x16, 2	; 22
  8a:	e0 cf       	rjmp	.-64     	; 0x4c <__SREG__+0xd>
  8c:	5f e7       	ldi	r21, 0x7F	; 127
  8e:	8a e1       	ldi	r24, 0x1A	; 26
  90:	96 e0       	ldi	r25, 0x06	; 6
  92:	51 50       	subi	r21, 0x01	; 1
  94:	80 40       	sbci	r24, 0x00	; 0
  96:	90 40       	sbci	r25, 0x00	; 0
  98:	e1 f7       	brne	.-8      	; 0x92 <__SREG__+0x53>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <__SREG__+0x5d>
  9c:	00 00       	nop
		{
			_delay_ms(250);
			OCR2 = 200;
  9e:	43 bd       	out	0x23, r20	; 35
  a0:	d5 cf       	rjmp	.-86     	; 0x4c <__SREG__+0xd>

000000a2 <_exit>:
  a2:	f8 94       	cli

000000a4 <__stop_program>:
  a4:	ff cf       	rjmp	.-2      	; 0xa4 <__stop_program>
