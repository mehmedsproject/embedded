
GccApplication5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  0000011c  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  0000011c  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000028  00000000  00000000  0000014c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000000ad  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000007c  00000000  00000000  00000221  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000000ce  00000000  00000000  0000029d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000048  00000000  00000000  0000036c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000147  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000049  00000000  00000000  000004fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00000544  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	2c c0       	rjmp	.+88     	; 0x60 <__vector_3>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a2 36       	cpi	r26, 0x62	; 98
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	02 d0       	rcall	.+4      	; 0x48 <main>
  44:	2f c0       	rjmp	.+94     	; 0xa4 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <main>:
#include <avr/io.h>
int i=0;
int main(void)
{
	
	DDRB = 0x01;
  48:	81 e0       	ldi	r24, 0x01	; 1
  4a:	87 bb       	out	0x17, r24	; 23
	
	TCCR2 = (1 << WGM21); // SET CTC BIT
  4c:	88 e0       	ldi	r24, 0x08	; 8
  4e:	85 bd       	out	0x25, r24	; 37
	OCR2 = 156.25; // Output compare register - the total timer ticks value
  50:	8c e9       	ldi	r24, 0x9C	; 156
  52:	83 bd       	out	0x23, r24	; 35
	TIMSK = (1 << OCIE2); // timer/counter interrupt mask register (timsk) - timer/counter output compare match interrupt enable (ocie2) will be 1
  54:	80 e8       	ldi	r24, 0x80	; 128
  56:	89 bf       	out	0x39, r24	; 57
	sei();
  58:	78 94       	sei
	TCCR2 = (1 << CS22);// | (1 << CS21) | (1 << CS20);  //timer resolution selected as clc/1024 prescalar
  5a:	84 e0       	ldi	r24, 0x04	; 4
  5c:	85 bd       	out	0x25, r24	; 37
  5e:	ff cf       	rjmp	.-2      	; 0x5e <main+0x16>

00000060 <__vector_3>:
        //TODO:: Please write your application code 
    }
}

ISR(TIMER2_COMP_vect)
{
  60:	1f 92       	push	r1
  62:	0f 92       	push	r0
  64:	0f b6       	in	r0, 0x3f	; 63
  66:	0f 92       	push	r0
  68:	11 24       	eor	r1, r1
  6a:	8f 93       	push	r24
  6c:	9f 93       	push	r25
	
	i++;
  6e:	80 91 60 00 	lds	r24, 0x0060
  72:	90 91 61 00 	lds	r25, 0x0061
  76:	01 96       	adiw	r24, 0x01	; 1
  78:	90 93 61 00 	sts	0x0061, r25
  7c:	80 93 60 00 	sts	0x0060, r24
	if (i > 65)
  80:	82 34       	cpi	r24, 0x42	; 66
  82:	91 05       	cpc	r25, r1
  84:	44 f0       	brlt	.+16     	; 0x96 <__vector_3+0x36>
	{
		PORTB ^= (1 << PINB0);
  86:	98 b3       	in	r25, 0x18	; 24
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	89 27       	eor	r24, r25
  8c:	88 bb       	out	0x18, r24	; 24
		i=0;
  8e:	10 92 61 00 	sts	0x0061, r1
  92:	10 92 60 00 	sts	0x0060, r1
	}

  96:	9f 91       	pop	r25
  98:	8f 91       	pop	r24
  9a:	0f 90       	pop	r0
  9c:	0f be       	out	0x3f, r0	; 63
  9e:	0f 90       	pop	r0
  a0:	1f 90       	pop	r1
  a2:	18 95       	reti

000000a4 <_exit>:
  a4:	f8 94       	cli

000000a6 <__stop_program>:
  a6:	ff cf       	rjmp	.-2      	; 0xa6 <__stop_program>
